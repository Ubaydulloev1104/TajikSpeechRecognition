@page "/sign-up"
@using System.Globalization;
@using TSR_Accoun_Application.Contracts.User.Commands.RegisterUser
@using TSR_Accoun_Application.Contracts.User.Queries.CheckUserDetails
@using TSR_Accoun_Application.Contracts.User.Responses
@using TSR_Client.Components.Auth
@using TSR_Client.Components.Buttons
@using TSR_Client.Services.Auth
@inject ISnackbar Snackbar
@inject IUserProfileService UserProfileService
@inject IAuthService AuthService
@inject IContentService ContentService

<MudGrid Justify="Justify.Center" Class="align-items-center">
    <MudItem xs="12" sm="8" md="6" lg="4">
        @if (_step == 0)
        {
            <MudCard>
                <MudCardHeader>
                    <CardHeaderActions>
                        <ToolBarSettingsButtons />
                    </CardHeaderActions>
                    <CardHeaderContent>
                        <div class="d-flex flex-grow-1">
                            <div class="flex-none d-flex justify-content-center">
                                <a href="">
                                    <MudImage Src="./images/icon.png" Height="45" /><br />
                                </a>
                            </div>
                            <div class="flex-initial d-flex py-1">
                                <MudText Typo="Typo.h4">
                                    <b>@ContentService["SignUp:LabelSignUp"]</b>
                                </MudText>
                            </div>
                        </div>
                        <MudText>
                            @ContentService["SignUp:LabelHaveAccount"]<MudLink Href="sign-in"> @ContentService["SignUp:LinkSignIn"]</MudLink>
                            </MudText>
                        </CardHeaderContent>
                    </MudCardHeader>
                    <MudCardContent>
                        <EditForm Model="@_registerUser" OnInvalidSubmit="SendCode">
                            <FluentValidationValidator @ref="_fluentValidationValidator" />
                            <MudTextField Label="@ContentService["SignUp:FirstName"]" HelperText="@ContentService["SignUp:FirstName_HelperText"]"
                                          @bind-Value="_registerUser.FirstName" For="@(() => _registerUser.FirstName)" InputType="InputType.Text"
                                          OnBlur="@(_ => _registerUser.FirstName = CultureInfo.CurrentCulture.TextInfo.ToTitleCase(_registerUser.FirstName))" />

                            <MudTextField Label="@ContentService["SignUp:LastName"]" HelperText="@ContentService["SignUp:LastName_HelperText"]"
                                          @bind-Value="_registerUser.LastName" For="@(() => _registerUser.LastName)" InputType="InputType.Text"
                                          OnBlur="@(_ => _registerUser.LastName = CultureInfo.CurrentCulture.TextInfo.ToTitleCase(_registerUser.LastName))" />
                            <MudTextField Label="@ContentService["SignUp:Email"]" Class="mt-3"
                                          @bind-Value="_registerUser.Email" For="@(() => _registerUser.Email)" InputType="InputType.Email"
                                          OnBlur="CheckUserName" />

                            <MudTextField Label="@ContentService["SignUp:Phone"]" HelperText="@ContentService["SignUp:Phone_HelperText"]" Class="mt-3"
                                          @bind-Value="_registerUser.PhoneNumber" For="@(() => _registerUser.PhoneNumber)" InputType="InputType.Telephone"
                                          OnBlur="CheckUserName" />

                            <MudTextField Label="@ContentService["SignUp:UserName"]"
                                          @bind-Value="_registerUser.Username" For="@(() => _registerUser.Username)"
                                          OnBlur="CheckUserName" />

                            <MudTextField Label="@ContentService["SignUp:Password"]" HelperText="@ContentService["SignUp:Password_HelperText"]" Class="mt-3" AdornmentIcon="@PasswordInputIcon" OnAdornmentClick="ButtonTestclick" AdornmentAriaLabel="Show Password" InputType="@PasswordInput" Adornment="Adornment.End"
                                          @bind-Value="_registerUser.Password" For="@(() => _registerUser.Password)" />

                            <MudTextField Label="@ContentService["SignUp:ConfirmPassword"]" HelperText="@ContentService["SignUp:ConfirmPassword_HelperText"]" Class="mt-3" AdornmentIcon="@PasswordInputIcon" OnAdornmentClick="ButtonTestclick" AdornmentAriaLabel="Show Password" InputType="@PasswordInput" Adornment="Adornment.End"
                                          @bind-Value="_registerUser.ConfirmPassword" For="@(() => _registerUser.ConfirmPassword)" />

                        </EditForm>
                    </MudCardContent>
                    <MudCardActions>
                        <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" OnClick="SendCode" Color="Color.Primary"
                                   Class="ml-auto" FullWidth="true">
                            @if (_processing)
                        {
                            <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                            <MudText Class="ms-2">Processing</MudText>
                        }
                        else
                        {
                            <MudText>@ContentService["SignUp:ButtonNext"]</MudText>
                        }
                    </MudButton>
                </MudCardActions>
                <ExternalLoginCard Title="@ContentService["SignUp:ExternalLoginCard"]" />
            </MudCard>
        }
       
    </MudItem>
</MudGrid>

@code {
    private readonly RegisterUserCommand _registerUser = new();
    private FluentValidationValidator _fluentValidationValidator;
    private int _step;
    private bool _processing;
    private bool _processing2;

    bool isShow;
    InputType PasswordInput = InputType.Password;
    string PasswordInputIcon = Icons.Material.Filled.VisibilityOff;

   

    void ButtonTestclick()
    {
        @if (isShow)
        {
            isShow = false;
            PasswordInputIcon = Icons.Material.Filled.VisibilityOff;
            PasswordInput = InputType.Password;
        }
        else
        {
            isShow = true;
            PasswordInputIcon = Icons.Material.Filled.Visibility;
            PasswordInput = InputType.Text;
        }
    }

  
    private int _isAvailable = -1;


    private async Task SendCode()
    {
        _processing = true;
        StateHasChanged();
        await CheckUserName();
        var check = true;
        if (_userDetailsResponse.IsEmailTaken)
        {
            Snackbar.Add("Email is not available", Severity.Error);
            check = false;
        }
        if (_userDetailsResponse.IsUserNameTaken)
        {
            Snackbar.Add("User Name is not available", Severity.Error);
            check = false;
        }
        if (_userDetailsResponse.IsUserNameTaken)
        {
            Snackbar.Add("Phone Number is not available", Severity.Error);
            check = false;
        }
        if (!check)
        {
            _processing = false;
            return;
        }


        if (!(await _fluentValidationValidator!.ValidateAsync()) || _isAvailable == 0)
        {
            _processing = false;
            return;
        }
        try
        {
            _processing = true;
            StateHasChanged();
            try
            {
                var error = await AuthService.RegisterUserAsync(_registerUser);
                Snackbar.Add(error, Severity.Error);

            }
            catch (Exception)
            {
                ServerNotResponding();
            }
            finally
            {
                _processing = false;
                StateHasChanged();
            }
        }
        catch (Exception)
        {
            ServerNotResponding();
        }
        finally
        {
            _processing = false;
            StateHasChanged();
        }
    }

    private void ServerNotResponding()
    {
        Snackbar.Add("Server is not responding, please try later", Severity.Error);
    }

    

    private UserDetailsResponse _userDetailsResponse = new();

    private async Task CheckUserName()
    {
        StateHasChanged();
        try
        {
            var query = new CheckUserDetailsQuery()
                {
                    UserName = _registerUser.Username,
                    PhoneNumber = _registerUser.PhoneNumber,
                    Email = _registerUser.Email
                };
            var result = await AuthService.CheckUserDetails(query);
            if (result.IsSuccessStatusCode)
            {
                _userDetailsResponse = await result.Content.ReadFromJsonAsync<UserDetailsResponse>();
            }
        }
        catch (Exception)
        {
            _isAvailable = -1;
            ServerNotResponding();
        }
        _processing2 = false;
        StateHasChanged();
    }

}