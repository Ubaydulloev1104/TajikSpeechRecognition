@using AltairCA.Blazor.WebAssembly.Cookie
@using Blazorise
@using TSR_Client.Services
@using TSR_Client.Enums
@using TSR_Client.wwwroot.resources
@using TSR_Client.Services.Profile
@using TSR_Client.Components.Buttons
@using Anchor = MudBlazor.Anchor
@using Breakpoint = MudBlazor.Breakpoint
@using Color = MudBlazor.Color
@using DividerType = MudBlazor.DividerType
@using Size = MudBlazor.Size
@inject NavigationManager NavigationManager
@inject LayoutService LayoutService
@inject IUserProfileService UserProfileService
<MudToolBar Class="toolbar-fixed-blur">
    <MudHidden Breakpoint="Breakpoint.MdAndUp">
        <MudIconButton Icon="@Icons.Material.Filled.Notes" Color="Color.Inherit" Edge="Edge.Start" OnClick="@ToggleDrawer"/>
    </MudHidden>
    <MudHidden Breakpoint="Breakpoint.Xs">
        <MudItem Style="padding-right:5px;">
            <MudImage src="images/icon.png" Style="width: 50px" />
        </MudItem>
        <MudItem Style="padding-left:0; margin-right: 40px;">
            <MudText Style="font-size: 21.5px;">
                <b>Tajik Speech </b>
            </MudText>
            <MudText Style="margin-top: -10px;">
                <small>
                    <b>Recognition</b>
                </small>
            </MudText>
        </MudItem>
    </MudHidden>
    <MudHidden Breakpoint="Breakpoint.SmAndUp">
        <MudItem Style="padding-right:5px;">
            <MudImage src="images/icon.png" Style="width: 30px" />
        </MudItem>
        <MudItem Style="padding-left:0; margin-right: 40px;">
            <MudText Style="font-size: 21.5px;">
                <b>TSR</b>
            </MudText>
        </MudItem>
    </MudHidden>

    <MudHidden Breakpoint="Breakpoint.SmAndDown">
        <MudButton Href="/" Color="Color.Inherit" Variant="Variant.Text" Class="@GetActiveClass(DocPages.Home)">
            <MudText>
                <b>@ContentService["Header:Home"]</b>
            </MudText>
        </MudButton>
        <MudButton Href="/word" Color="Color.Inherit" Variant="Variant.Text" Class="@GetActiveClass(DocPages.Word)">
            <MudText>
                <b>@ContentService["Header:Words"]</b>
            </MudText>
        </MudButton>
        <MudButton Href="/Audio_Recorder" Color="Color.Inherit" Variant="Variant.Text" Class="@GetActiveClass(DocPages.Word)">
            <MudText>
                <b> Audio_Recorder </b>
            </MudText>
        </MudButton>
        <MudButton Href="/contact" Color="Color.Inherit" Variant="Variant.Text" Class="@GetActiveClass(DocPages.Contact)">
            <MudText>
                <b>Contact</b>
            </MudText>
        </MudButton>
    </MudHidden>
    <MudSpacer/>
    <MudHidden Breakpoint="Breakpoint.Xs">
        <MudDivider Vertical="true" DividerType="DividerType.Middle" FlexItem="true" Class="mx-4 my-4"/>
        <MudHidden Breakpoint="Breakpoint.SmAndDown">
            
        </MudHidden>
        <ToolBarSettingsButtons/>
    </MudHidden>

    <UserButton/>
</MudToolBar>

<MudDrawer @bind-Open="@_open" Anchor="Anchor.Start" Elevation="0" Variant="@DrawerVariant.Persistent" Style="position:fixed;height: 100%"
           ClipMode="DrawerClipMode.Docked">
    <MudToolBar Dense="true" Class="docs-gray-bg">
        <MudIconButton Icon="@Icons.Material.Filled.Close" Color="Color.Inherit" Edge="Edge.Start" OnClick="@ToggleDrawer"/>
        <MudSpacer/>
     <ToolBarSettingsButtons/>
    <UserButton />
    </MudToolBar>

    <MudNavMenu Rounded="true" Dense="true" Color="Color.Primary" Class="pa-2">
        <MudNavLink Match="NavLinkMatch.All" Href="/">@ContentService["Header:Home"]</MudNavLink>
            <MudNavLink Match="NavLinkMatch.All" Href="/word">@ContentService["Header:Words"]</MudNavLink>
        <MudNavLink Match="NavLinkMatch.All" Href="/contact">Contact</MudNavLink>
    </MudNavMenu>
</MudDrawer>


@code {

    bool _open = false;

    void ToggleDrawer()
    {
        _open = !_open;
    }

    private DocPages currentPage;


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        if (firstRender)
        {
            try
            {
                LayoutService.User = await UserProfileService.Get();
            }
            catch (Exception e)
            {
            }
            StateHasChanged();
        }
    }


    protected override void OnInitialized()
    {
        currentPage = LayoutService.GetDocsBasePage(NavigationManager.Uri);

        StateHasChanged();
        NavigationManager.LocationChanged += HandleLocationChanged;
        base.OnInitialized();
    }

    private void HandleLocationChanged(object sender, LocationChangedEventArgs e)
    {
        currentPage = LayoutService.GetDocsBasePage(NavigationManager.Uri);
        StateHasChanged();
    }

    private string GetActiveClass(DocPages page)
    {
        return page == currentPage ? "mud-chip-text mud-chip-color-primary mx-1 px-3" : "mx-1 px-3";
    }

    public void Dispose()
    {
        NavigationManager.LocationChanged -= HandleLocationChanged;
    }

}