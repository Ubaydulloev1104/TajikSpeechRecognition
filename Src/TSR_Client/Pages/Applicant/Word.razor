@page "/word"
@using Application.Contracts.WordClient
@using TSR_Client.Components.Word
@inject ICategoryService categoryService
@inject IWordService vacancyService
@using Application.Contracts.WordClient
@using Blazorise.Extensions
@using TSR_Client.Services.ConverterService
@inject ICategoryService CategoryService
@inject IWordService VacancyService
@inject IDateTimeConvertToStringService DateTimeConvertToStringService
@inject NavigationManager NavigationManager

<MudText Typo="Typo.h4" Style="margin:50px; text-align: center; font-weight: 900;">@ContentService["Words:Words"]</MudText>
@if (serverError)
{
	<ServerErrorComponent />
}
else
{
	
@if (Words is null)
{
    <div style="text-align: center;">
        <MudProgressCircular Color="Color.Primary" Style="height:70px;width:70px;" Indeterminate="true"/>
    </div>
}
else
{
    <MudGrid Spacing="4">

        <MudItem sm="12" md="3" lg="2">
            <MudGrid>
                <MudItem xs="12" sm="12" md="12" lg="12">
                    <MudCard Class="rounded-lg mud-elevation-4">
                        <MudCardContent>
                            <MudHidden Breakpoint="Breakpoint.SmAndDown">
                                <MudNavMenu Rounded="true" Color="Color.Primary" Class="pa-2">
                                    <MudNavLink OnClick="@(() => SelectCategory())"
                                                Class="@(_selectedCategory == null ? "mud-chip-text mud-chip-color-primary" : "")">
                                        <div class="customTabContainer">
                                            <div class="customTabContainerLeft">
                                                <MudText>
                                                    <b> @ContentService["VacanciesList:All"]</b>
                                                </MudText>
                                            </div>
                                            <div class="customTabContainerRight">

                                            </div>
                                        </div>

                                    </MudNavLink>
                                    @foreach (var cat in wordsCategories)
                                    {
                                        <MudNavLink OnClick="@(() => SelectCategory(cat))" Class="@(_selectedCategory == cat ? "mud-chip-text mud-chip-color-primary" : "")">
                                            <div class="d-flex flex-grow-1">
                                                <MudText>
                                                    <b>@cat</b>
                                                </MudText>
                                                <MudSpacer/>
                                                <MudBadge Origin="Origin.CenterRight" Color="Color.Primary" Content="@GetWordCategoryCount(cat)"></MudBadge>
                                            </div>
                                        </MudNavLink>
                                    }
                                </MudNavMenu>
                            </MudHidden>
                            <MudHidden Breakpoint="Breakpoint.MdAndUp">
                                <MudExpansionPanel Text="Categories">
                                    <MudNavMenu Rounded="true" Color="Color.Primary" Class="pa-2">
                                        <MudNavLink OnClick="@(() => SelectCategory())"
                                                    Class="@(_selectedCategory == null ? "mud-chip-text mud-chip-color-primary" : "")">
                                            <div class="customTabContainer">
                                                <div class="customTabContainerLeft">
                                                    <MudText>
                                                        <b> @ContentService["VacanciesList:All"]</b>
                                                    </MudText>
                                                </div>
                                                <div class="customTabContainerRight">

                                                </div>
                                            </div>

                                        </MudNavLink>
                                        @foreach (var cat in wordsCategories)
                                        {
                                            <MudNavLink OnClick="@(() => SelectCategory(cat))" Class="@(_selectedCategory == cat ? "mud-chip-text mud-chip-color-primary" : "")">
                                                <div class="d-flex flex-grow-1">
                                                    <MudText>
                                                        <b>@cat</b>
                                                    </MudText>
                                                    <MudSpacer/>
                                                    <MudBadge Origin="Origin.CenterRight" Color="Color.Primary" Content="@GetWordCategoryCount(cat)"></MudBadge>
                                                </div>
                                            </MudNavLink>
                                        }
                                    </MudNavMenu>
                                </MudExpansionPanel>
                            </MudHidden>
                        </MudCardContent>
                    </MudCard>
                </MudItem>
            </MudGrid>

        </MudItem>
        @if (wordsCategories.Count == 0)
        {
            <MudText Typo="Typo.h5" Style="margin:50px;">There are currently no job vacancies available. Please check back later :)</MudText>
        }
        else
        {
            <MudItem sm="12" md="9" lg="10">
                <MudGrid>
                    <MudItem xs="12">
                        <MudCard Class="rounded-lg p-3 mud-elevation-4 p-5">

                            <MudTextField @bind-Value="Search" TextChanged="SearchVacancy" Label="Search" Class="rounded-lg"
                                          Variant="Variant.Outlined" OnAdornmentClick="SearchVacancy" Adornment="Adornment.End"
                                          AdornmentIcon="@Icons.Material.Filled.Search" AdornmentColor="Color.Info"/>

                        </MudCard>
                    </MudItem>
                    @foreach (var Words in GetVisibleWord())
                    {
                        <MudItem xs="12" md="12" lg="6">
                            <a href="/@Route/@Words.Slug">
                                <MudCard Class="rounded-lg mud-elevation-4">
                                    <MudCardContent>
                                        <MudText Style="color: #129fd7;" Typo="Typo.h5">
                                            <b>@Words.Value</b>
                                        </MudText>
                                        <MudText Typo="Typo.body2" Style="color:rgb(128,128,128)">
                                            <small>
                                                <b>Posted @DateTimeConvertToStringService.GetDisplayPostedDate(Words.CreateDate)</b>
                                            </small>
                                        </MudText>
                                        <br/> 
                                    </MudCardContent>
                                </MudCard>
                            </a>
                        </MudItem>
                    }
                    @if (GetTotalPages() > 1)
                    {
                        <MudItem xs="12" Class="d-flex justify-content-center">
                            <MudPagination Color="Color.Info" Variant="Variant.Outlined" Count="@GetTotalPages()" @bind-Selected="@_selected"/>
                        </MudItem>
                    }
                </MudGrid>
            </MudItem>
        }
    </MudGrid>
}
}

@code {
    private bool serverError;
    private List<string> wordsCategories = new List<string> { "New Word","Category1", "Category2", "Category3" }; // Ручное заполнение категорий слов
    private List<WordClientResponse> Words = new List<WordClientResponse>
	{
		new WordClientResponse { Category = "Category1", Value = "Word1", Description = "Description1", Slug = "slug1", CreateDate = DateTime.Now, UpdatedDate = DateTime.Now },
		new WordClientResponse { Category = "Category1", Value = "Word1", Description = "Description1", Slug = "slug1", CreateDate = DateTime.Now, UpdatedDate = DateTime.Now },
		new WordClientResponse { Category = "Category2", Value = "Word2", Description = "Description2", Slug = "slug2", CreateDate = DateTime.Now, UpdatedDate = DateTime.Now },
		new WordClientResponse { Category = "New Word", Value = "New Word", Description = "Hello  Haw are you I am where good bla  bla bla ", Slug = "new-Word", CreateDate = new DateTime(2024, 04, 29), UpdatedDate = new DateTime(2024, 06, 08)}
	}; // Ручное заполнение слов
    private List<WordClientResponse> FilteredWord; // Пустой список, который вы можете заполнить по мере необходимости
    public string Route { get; set; } = "words";
    private int _selected = 1;
    public string Search { get; set; }
    private bool showLoader = false;

    private int _activeIndex = 0;
    private string _selectedCategoryText = "All Word";
    private int _itemsPerPage = 6;

    protected override async void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            await Task.Delay(1000);
            showLoader = true;
            StateHasChanged();
        }
    }

    private string _selectedCategory = null;

    private void SelectCategory(string cats = null)
    {
        _selectedCategory = cats;
        FilteredWord = cats.IsNullOrEmpty() ? Words : Words.Where(j => j.Category == cats).ToList();
    }

    private void HandleTabSelection(int index)
    {
        _activeIndex = index;

        if (index == 0)
        {
            FilteredWord = Words;
        }
        else if (index > 0 && index <= wordsCategories.Count)
        {
            _selectedCategoryText = wordsCategories[index - 1];
            FilteredWord = Words.Where(j => j.Category == _selectedCategoryText).ToList();
        }

    // Reset pagination on tab change
        _selected = 1;
    }

    private int GetWordCategoryCount(string category)
    {
        return Words.Count(j => j.Category == category);
    }

    private void ApplySearchFilter(string query)
    {
        if (!string.IsNullOrEmpty(query))
        {
            Console.WriteLine(query);
            FilteredWord = Words
                .Where(j => j.Value.Contains(Search, StringComparison.OrdinalIgnoreCase)
                            || j.Description.Contains(query, StringComparison.OrdinalIgnoreCase))
                .ToList();
        }
        else
        {
            FilteredWord = Words;
        }

    // Reset pagination on search
        _selected = 1;
    }

    private void SearchVacancy()
    {
        ApplySearchFilter(Search);
    }

    private List<WordClientResponse> GetVisibleWord()
    {
        int startIndex = (_selected - 1) * _itemsPerPage;
        return FilteredWord.Skip(startIndex).Take(_itemsPerPage).ToList();
    }

    private int GetTotalPages()
    {
        return (int)Math.Ceiling((double)FilteredWord.Count / _itemsPerPage);
    }


	protected override async Task OnInitializedAsync()
	{
		await base.OnInitializedAsync();
		try
		{
			// var result = await categoryService.GetWordCategoriesSinceCheckDate();
			// var allJobs = await vacancyService.GetWords();
			// if (result is not null && allJobs is not null)
			// {
			// 	wordsCategories = result.Select(r => r.Category.Name).ToList();
			// 	Words = allJobs.Select(r => new WordClientResponse
			// 		{
			// 			Category = r.Category,
			// 			Value = r.Value,
			// 			Description = r.Description,
			// 			Slug = r.Slug,
			// 			CreateDate = r.CreateDate,
			// 			UpdatedDate = r.UpdatedDate
			// 		}).ToList(); ;
			// 	FilteredWord = allJobs.Select(r => new WordClientResponse
			// 		{
			// 			Category = r.Category,
			// 			Value = r.Value,
			// 			Description = r.Description,
			// 			Slug = r.Slug,
			// 			CreateDate = r.CreateDate,
			// 			UpdatedDate = r.UpdatedDate
			// 		}).ToList(); ;
			// }
		}
		catch (Exception Ex)
		{
			Console.WriteLine("re" + Ex);
			StateHasChanged();
		}
	}
}
