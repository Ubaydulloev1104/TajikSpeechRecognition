@using Application.Contracts.WordClient
@using TSR_Client.CustomMethods
@inject ICategoryService categoryService
@inject IWordService wordService

<style>
	.job-card:hover {
		background-color: #F5F5F5; /* Change to desired hover color */
	}
</style>

@if (Words is null)
{
	if (showLoader)
	{
		<div class="loader"></div>
	}
}
else
{
	<MudContainer>
		<MudGrid Spacing="4">
			<MudItem xs="12" md="3">
				<MudHidden Breakpoint="Breakpoint.Xs" Invert="true">
					<MudTabs MinimumTabWidth="200px" Rounded="true" Elevation="4" ActivePanelIndexChanged="@(index => HandleTabSelection(index))">
						<MudTabPanel Text="All" />
						@foreach (var WordCats in WordCategories)
						{
							<MudTabPanel Text="@WordCats" BadgeData="@GetWordCategoryCount(WordCats)" BadgeColor="Color.Info" />
						}
					</MudTabs>
				</MudHidden>
				<MudHidden Breakpoint="Breakpoint.Sm" Invert="true">
					<MudTabs MinimumTabWidth="200px" Rounded="true" Elevation="4" ActivePanelIndexChanged="@(index => HandleTabSelection(index))">
						<MudTabPanel Text="All" />
						@foreach (var WordCats in WordCategories)
						{
							<MudTabPanel Text="@WordCats" BadgeData="@GetWordCategoryCount(WordCats)" BadgeColor="Color.Info" />
						}
					</MudTabs>
				</MudHidden>
				<MudHidden Breakpoint="Breakpoint.Md" Invert="true">
					<MudTabs Outlined="true" MinimumTabWidth="250px" Position="Position.Left" ActivePanelIndexChanged="@(index => HandleTabSelection(index))">
						<MudTabPanel Text="All" />
						@foreach (var WordCats in WordCategories)
						{
							<MudTabPanel Text="@WordCats" BadgeData="@GetWordCategoryCount(WordCats)" BadgeColor="Color.Info" />
						}
					</MudTabs>
				</MudHidden>
				<MudHidden Breakpoint="Breakpoint.Lg" Invert="true">
					<MudTabs Outlined="true" MinimumTabWidth="250px" Position="Position.Left" ActivePanelIndexChanged="@(index => HandleTabSelection(index))">
						<MudTabPanel Text="All" />
						@foreach (var WordCats in WordCategories)
						{
							<MudTabPanel Text="@WordCats" BadgeData="@GetWordCategoryCount(WordCats)" BadgeColor="Color.Info" />
						}
					</MudTabs>
				</MudHidden>
				<MudHidden Breakpoint="Breakpoint.Xl" Invert="true">
					<MudTabs Outlined="true" MinimumTabWidth="250px" Position="Position.Left" ActivePanelIndexChanged="@(index => HandleTabSelection(index))">
						<MudTabPanel Text="All" />
						@foreach (var WordCats in WordCategories)
						{
							<MudTabPanel Text="@WordCats" BadgeData="@GetWordCategoryCount(WordCats)" BadgeColor="Color.Info" />
						}
					</MudTabs>
				</MudHidden>
				<MudHidden Breakpoint="Breakpoint.Xxl" Invert="true">
					<MudTabs Outlined="true" MinimumTabWidth="250px" Position="Position.Left" ActivePanelIndexChanged="@(index => HandleTabSelection(index))">
						<MudTabPanel Text="All" />
						@foreach (var WordCats in WordCategories)
						{
							<MudTabPanel Text="@WordCats" BadgeData="@GetWordCategoryCount(WordCats)" BadgeColor="Color.Info" />
						}
					</MudTabs>
				</MudHidden>
			</MudItem>
			@if (WordCategories.Count == 0)
			{
				<MudText Typo="Typo.h5" Style="margin:50px;">There are currently no job vacancies available. Please check back later :)</MudText>
			}
			else
			{
				<MudItem xs="12" md="9">
					<MudGrid>
						<MudItem xs="12">
							<MudTextField @bind-Value="Search" TextChanged="SearchWord" Label="Search" Variant="Variant.Outlined" OnAdornmentClick="SearchWord" Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Filled.Search" AdornmentColor="Color.Info" />
						</MudItem>
						@foreach (var Words in GetVisibleWords())
						{
							<MudItem xs="12">
								<a href="/@Route/@Words.Slug">
									<MudCard Class="job-card">
										<MudCardContent>
											<MudText Style="color: #129fd7;" Typo="Typo.h5"><b>@Words.Value</b></MudText>
											<MudText Typo="Typo.body2" Style="color:gray"><small><b>Posted @CustomConverter.GetDisplayPostedDate(Words.CreateDate)</b></small></MudText>
											<br />
											<MudText Typo="Typo.h6">@Words.Description</MudText>
												<MudGrid>
													@if (Words.CreateDate != default(DateTime))
												{
													<MudItem Style="color:gray">
														<MudText Typo="Typo.caption">CreateDate <b>@Words.CreateDate month(s)</b></MudText>
													</MudItem>
												}
												@if (Words.UpdatedDate != default(DateTime))
												{
													<MudItem Style="color:gray">
														<MudText Typo="Typo.caption">UpdatedDate <b>@Words.UpdatedDate month(s)</b></MudText>
													</MudItem>
													
												}
											</MudGrid>
										</MudCardContent>
									</MudCard>
								</a>
							</MudItem>
						}
						@if (GetTotalPages() > 1)
						{
							<MudItem xs="12" Class="d-flex justify-content-center">
								<MudPagination Color="Color.Info" Variant="Variant.Outlined" Count="@GetTotalPages()" @bind-Selected="@_selected" />
							</MudItem>
						}
					</MudGrid>
				</MudItem>
			}
		</MudGrid>
	</MudContainer>

}

@code {
	private int _selected = 1;
	public string Search { get; set; }
	private bool showLoader = false;
	[Parameter]
	public List<string> WordCategories { get; set; }

	[Parameter]
	public List<WordClientResponse> Words { get; set; }

	[Parameter]
	public string Route { get; set; }

	[Parameter]
	public List<WordClientResponse> filteredWord { get; set; }
	private int activeIndex = 0;
	private string selectedCategoryText = "All Word";
	private int ItemsPerPage = 5;

	protected override async void OnAfterRender(bool firstRender)
	{
		if (firstRender)
		{
			await Task.Delay(1000);
			showLoader = true;
			StateHasChanged();
		}
	}

	private void HandleTabSelection(int index)
	{
		activeIndex = index;

		if (index == 0)
		{
			filteredWord = Words;
		}
		else if (index > 0 && index <= WordCategories.Count)
		{
			selectedCategoryText = WordCategories[index - 1];
			filteredWord = Words.Where(j => j.Category == selectedCategoryText).ToList();
		}

		// Reset pagination on tab change
		_selected = 1;
	}

	private int GetWordCategoryCount(string category)
	{
		return Words.Count(j => j.Category == category);
	}

	private void ApplySearchFilter(string query)
	{
		if (!string.IsNullOrEmpty(query))
		{
			Console.WriteLine(query);
			filteredWord = Words
				.Where(j => j.Value.Contains(Search, StringComparison.OrdinalIgnoreCase)
							|| j.Description.Contains(query, StringComparison.OrdinalIgnoreCase))
				.ToList();
		}
		else
		{
			filteredWord = Words;
		}

		// Reset pagination on search
		_selected = 1;
	}

	private void SearchWord()
	{
		ApplySearchFilter(Search);
	}

	private List<WordClientResponse> GetVisibleWords()
	{
		int startIndex = (_selected - 1) * ItemsPerPage;
		return filteredWord.Skip(startIndex).Take(ItemsPerPage).ToList();
	}

	private int GetTotalPages()
	{
		return (int)Math.Ceiling((double)filteredWord.Count / ItemsPerPage);
	}
}
