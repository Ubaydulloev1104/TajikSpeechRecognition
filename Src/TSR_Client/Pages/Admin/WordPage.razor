@page "/dashboard/words"
@using Application.Contracts.Word.Responses
@using Application.Contracts.WordCategore.Responses
@using TSR_Client.Components
@using static Application.Contracts.Dtos.Enums.ApplicationStatusDto
@layout Dashboard

@inject IWordService WService

<style>
	.mud-input-control {
		margin-bottom: 10px;
	}
</style>

<MudText Typo="Typo.h3" Style="margin:50px; color: #129fd7; text-align: center; font-weight: 900">Jobs</MudText>
@if (serverError)
{
	<ServerErrorComponent />
}
else
{
	@if (_category == null)
	{
		<div>Loading</div>
	}
	else
	{

		<MudExpansionPanels>
			<MudExpansionPanel Text="Create new Job" @bind-IsExpanded=@panelOpenState>


				<MudTextField @bind-Value="@VService.creatingNewJob.Title" Label="Title" Variant="Variant.Outlined"></MudTextField>
				<MudTextField Lines="5" @bind-Value="@VService.creatingNewJob.ShortDescription" Label="ShortDescription" TextArea Variant="Variant.Outlined"></MudTextField>
				<MudTextField Lines="5" @bind-Value="@VService.creatingNewJob.Description" Label="Description" TextArea Variant="Variant.Outlined"></MudTextField>
				<div class="row">
					<div class="col-md-4">
						<MudTextField @bind-Value="@VService.creatingNewJob.RequiredYearOfExperience" Label="Required year(s) of experience" Variant="Variant.Outlined"></MudTextField>
					</div>
					<div class="col-md-4">
						<MatSelectItem @bind-Value="VService.creatingNewJob.WorkSchedule" Items="@value2Items">
						</MatSelectItem>
					</div>
					<div class="col-md-4">
						<MudSelect T="string" Label="Select category" @bind-Value="@selectedCategory" Variant="Variant.Outlined">
							@foreach (var cat in _category)
							{
								<MudSelectItem Value="@cat.Name" />
							}
						</MudSelect>
					</div>
				</div>
				<div class="row">
					<div class="col-md-6">
						<MudDatePicker @bind-Date="@VService.creatingNewJob.EndDate" Variant="Variant.Outlined" Label="End date" />
					</div>
					<div class="col-md-6">
						<MudDatePicker @bind-Date="@VService.creatingNewJob.PublishDate" Variant="Variant.Outlined" Label="Publish date" />
					</div>
				</div>


				<MudPaper Class="p-2 mb-2">
					<MudText Typo="Typo.caption">Vacancy questions</MudText>
					@foreach (var ques in Questions)
					{
						<MudText Typo="Typo.subtitle1"><MudIcon Icon="@Icons.Material.Filled.QuestionMark" /> @ques.Question<MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Error" OnClick="() => RemoveQuestion(ques.Question)" aria-label="delete"></MudIconButton></MudText>

					}
					<MudTextField @bind-Value="newQuestion" OnKeyDown="@OnKeyDown" OnAdornmentClick="AddQuestions" Label="New question" Variant="Variant.Outlined" Adornment="Adornment.End" AdornmentIcon=@Icons.Material.Filled.Add AdornmentColor="Color.Secondary" />
				</MudPaper>
				<MudPaper Class="p-2 mb-2">
	<MudText Typo="Typo.caption">Vacancy Tasks</MudText>
	@foreach (var task in Tasks)
	{
		<MudText Typo="Typo.subtitle1"><MudIcon Icon="@Icons.Material.Filled.Task" /> @task.Title<MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Error" OnClick="() => RemoveTask(task.Title)" aria-label="delete"></MudIconButton></MudText>
		<MudText Typo="Typo.subtitle1"><MudIcon Icon="@Icons.Material.Filled.Task" /> @task.Description</MudText>
		<MudText Typo="Typo.subtitle1"><MudIcon Icon="@Icons.Material.Filled.Task" /> @task.Template</MudText>
		<MudText Typo="Typo.subtitle1"><MudIcon Icon="@Icons.Material.Filled.Task" /> @task.Test</MudText>

	}
	<MudTextField @bind-Value="newTitle" OnKeyDown="@OnKeyDown" Label="New Title" Variant="Variant.Outlined" Adornment="Adornment.End" AdornmentColor="Color.Secondary" />
	<MudTextField Lines="5" @bind-Value="newDescription" OnKeyDown="@OnKeyDown" Label="New Description" Variant="Variant.Outlined" Adornment="Adornment.End" AdornmentColor="Color.Secondary" />
	<MudTextField Lines="5" @bind-Value="newTemplate" OnKeyDown="@OnKeyDown" Label="New Template" Variant="Variant.Outlined" Adornment="Adornment.End" AdornmentColor="Color.Secondary" />
	<MudTextField Lines="5" @bind-Value="newTest" OnKeyDown="@OnKeyDown" Label="New Test" Variant="Variant.Outlined" Adornment="Adornment.End" AdornmentColor="Color.Secondary" />
	<MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Surface" @onclick="@AddTask" Id="AddTask">Add Task</MudButton>
    </MudPaper>
				<MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Success" @onclick="@HandleSubmit" Id="btnInsert" hidden="@isInserting">Insert</MudButton>
				<MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Warning" @onclick="@HandleUpdate" Id="btnUpdate" hidden="@isUpdating">Update</MudButton>
				<MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Surface" @onclick="@HandleCancel" Id="btnUpdate">Cancel</MudButton>


			</MudExpansionPanel>
		</MudExpansionPanels>
		<DeleteConfirmation @bind-IsOpen="@isDialogOpen" OnConfirm="DeleteItem" />
		<MudTable Items="@words" Class="text-center" Breakpoint="Breakpoint.Md">
			<HeaderContent>
				<MudTh>Title</MudTh>
				<MudTh>ShortDescription</MudTh>
				<MudTh>Category</MudTh>
				<MudTh>PublishDate</MudTh>
				<MudTh>EndDate</MudTh>
				<MudTh>WorkSchedule</MudTh>
				<MudTh></MudTh>
			</HeaderContent>
			<RowTemplate>
				<MudTd DataLabel="Title">@context.Title</MudTd>
				<MudTd DataLabel="Short description">
					@(context.ShortDescription.Count() > 50 ? context.ShortDescription.Substring(0, 50) : context.ShortDescription)
				</MudTd>
				<MudTd DataLabel="Category">@context.Category</MudTd>
				<MudTd DataLabel="Publish date">@context.PublishDate.ToString("D")</MudTd>
				<MudTd DataLabel="End date">@context.EndDate.ToString("D")</MudTd>
				<MudTd DataLabel="Work schedule">@context.WorkSchedule</MudTd>
				<MudTd DataLabel="Action">
					<MatButton @onclick="()=>OnDeleteClick(context.Slug)" Style="color:#2094CC" Icon="delete">Delete</MatButton>
					<MatButton @onclick="()=>OnEditClick(context.Slug)" Style="color:#2094CC" Icon="edit">Edit</MatButton>
				</MudTd>
			</RowTemplate>
		</MudTable>

	}
}

@code {

	private bool serverError;
	WorkSchedule[] value2Items = Enum.GetValues(typeof(WorkSchedule)).Cast<WorkSchedule>().ToArray();


	private List<CategoryResponse> _category;
	private List<WordListDto> words;
	private bool isDialogOpen = false;
	private string itemSlugToDelete;
	bool panelOpenState;
	private bool isInserting = false;
	private bool isUpdating = true;
	private string UpdateSlug;
	private string selectedCategory = string.Empty;

	void OnDeleteClick(string slug)
	{
		itemSlugToDelete = slug;
		isDialogOpen = true;
	}

	private async Task DeleteItem()
	{
		await WService.OnDelete(itemSlugToDelete);
		isDialogOpen = false;
		await LoadData();
	}

	protected override async Task OnInitializedAsync()
	{
		try
		{
			_category = await WService.GetAllCategory();
			words = await WService.GetJobs();

		}
		catch (Exception)
		{
			serverError=true;
			StateHasChanged();
		}
	}

	private async Task HandleSubmit()
	{
		var catId = _category.FirstOrDefault(c => c.Name == selectedCategory).Id;
		WService.creatingNewWord.CategoryId = catId;
		await WService.OnSaveCreateClick();
		await LoadData();
		Clear();
	}

	private async Task LoadData()
	{
		words = await WService.GetJobs();
	}


	public async Task OnEditClick(string slug)
	{
		// Получение данных о выбранной вакансии
		var Wors = await WService.GetBySlug(slug);
		if (Wors != null)
		{
			// Отображение данных о выбранной вакансии в форме
			WService.creatingNewWord.Value = Wors.Value;
			WService.creatingNewWord.Description = Wors.Description;
			WService.creatingNewWord.RequiredYearOfExperience = Wors.RequiredYearOfExperience;
			WService.creatingNewWord.WorkSchedule = Wors.WorkSchedule;
			if (Wors.CategoryId.HasValue)
			{
				WService.creatingNewWord.CategoryId = Wors.CategoryId.Value;
			}
			WService.creatingNewWord.CreateDate = Wors.CreateDate ;
			WService.creatingNewWord.UpdatedDate = Wors.U;
			selectedCategory = _category.FirstOrDefault(c => c.Id == Wors.CategoryId).Name;
			// Открытие панели формы
			panelOpenState = true;
			isInserting = true;
			isUpdating = false;
			UpdateSlug = slug;
			Questions = Wors.VacancyQuestions.Select(v =>

				new VacancyQuestionDto
					{
						Question = v.Question
					}
			).ToList();
	Tasks = Wors.VacancyTasks.Select(v =>
	new VacancyTaskDto
		{
			Title = v.Title,
			Description = v.Description,
			Template = v.Template,
			Test = v.Test
		}).ToList();
		}
	}

	private void RemoveQuestion(string question)
	{
		var q = Questions.FirstOrDefault(t => t.Question == question);
		Questions.Remove(q);
	}
	private void RemoveTask(string title)
{
	var r = Tasks.FirstOrDefault(t => t.Title == title);
	Tasks.Remove(r);
}

	private async Task HandleUpdate()
	{
		VService.creatingNewJob.VacancyQuestions = Questions;
	    VService.creatingNewJob.VacancyTasks = Tasks;
		var catId = _category.FirstOrDefault(c => c.Name == selectedCategory).Id;
		VService.creatingNewJob.CategoryId = catId;
		await VService.UpdateJobVacancy(UpdateSlug);
		await LoadData();
		Clear();
	}

	public void AddQuestions()
	{
		Questions.Add(new VacancyQuestionDto { Question = newQuestion });
		newQuestion = "";
	}
	public void AddTask()
    {
	Tasks.Add(new VacancyTaskDto
		{
			Title = newTitle,
			Description = newDescription,
			Template = newTemplate,
			Test = newTest
		});
	newTitle = "";
	newDescription = "";
	newTemplate = "";
	newTest = "";
    }
	private async Task OnKeyDown(KeyboardEventArgs e)
	{
		if (e.Code == "Enter")
		{
			await Task.Delay(1);
	        AddTask();
			AddQuestions();
		}
	}

	void HandleCancel()
	{
		Clear();
	}

	private void Clear()
	{
		VService.creatingNewJob.Title = string.Empty;
		VService.creatingNewJob.ShortDescription = string.Empty;
		VService.creatingNewJob.Description = string.Empty;
		VService.creatingNewJob.RequiredYearOfExperience = 0;
		VService.creatingNewJob.WorkSchedule = 0;
		VService.creatingNewJob.EndDate = DateTime.Now;
		VService.creatingNewJob.PublishDate = DateTime.Now;
		isInserting = false;
		isUpdating = true;
		UpdateSlug = string.Empty;
		Questions.Clear();
	    Tasks.Clear();
	}
}
