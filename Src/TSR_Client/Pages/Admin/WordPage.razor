@page "/dashboard/word"
@using Application.Contracts.Word.Responses
@using Application.Contracts.WordCategore.Responses
@using System.ComponentModel.DataAnnotations
@using TSR_Client.Components
@using TSR_Client.Components.Dialogs
@using TSR_Client.Identity
@using static Application.Contracts.Dtos.Enums.ApplicationStatusDto
@layout Dashboard
@inject IWordService VService
@inject IJSRuntime JsRuntime
@inject IDialogService DialogService
@inject LayoutService LayoutService
@inject IJSRuntime jsRuntime
@inject ISnackbar Snackbar;

@if (_serverError)
{
	<ServerErrorComponent />
}
else
{
	@if (_category == null)
	{
		<div style="text-align: center;">
			<MudProgressCircular Color="Color.Primary" Style="height:70px;width:70px;" Indeterminate="true" />
		</div>
	}
	else
	{
		<MudGrid>
			<MudItem lg="12">
				<MudCardActions>
					<MudText Typo="Typo.h4">
						<b>Word</b>
					</MudText>
					<MudSpacer />
					<MudButton Disabled="@_panelOpenState" Color="Color.Primary" Variant="Variant.Filled" OnClick="@(() => _panelOpenState = !_panelOpenState)">
						<MudText>Create New Words</MudText>
					</MudButton>
				</MudCardActions>
			</MudItem>
			<MudItem lg="12" hidden="@(!_panelOpenState)">
				<EditForm Model="@VService.creatingNewWord">
					<FluentValidationValidator />
					<MudGrid>
						<MudItem xs="12" lg="6">
							<MudCard Class="rounded-4 mud-elevation-4">
								<MudCardHeader>
									<CardHeaderContent>
										<MudText Style="color:#808080">
											<b>@_createOrEditHeader</b>
										</MudText>
									</CardHeaderContent>
								</MudCardHeader>
								<MudCardContent>
									<MudTextField @bind-Value="@VService.creatingNewWord.Value" Label="Title"
												  Variant="Variant.Outlined" For="@(() => VService.creatingNewWord.Value)" />
									<MudTextField Lines="10" @bind-Value="@VService.creatingNewWord.Description" Label="Description"
												  Variant="Variant.Outlined" For="@(() => VService.creatingNewWord.Description)" />
								</MudCardContent>
							</MudCard>
						</MudItem>
						<MudItem xs="12" lg="6">
							<MudCard Class="rounded-4 mud-elevation-4">
								<MudCardHeader>
									<CardHeaderContent>
										<MudText Style="color: rgb(128,128,128)">
											<b>Word details</b>
										</MudText>
									</CardHeaderContent>
								</MudCardHeader>
								<MudCardContent>
									<MudGrid>
										<MudItem xs="12" lg="12">
											<MudText Style="color:rgb(128,128,128)" Typo="Typo.body2">Category</MudText>
											<MudSelect T="string" Label="Select category" @bind-Value="@_selectedCategory" Variant="Variant.Outlined">
												@foreach (var cat in _category)
												{
													<MudSelectItem Value="@cat.Name" />
												}
											</MudSelect>
										</MudItem>
									</MudGrid>
								</MudCardContent>
							</MudCard>
						</MudItem>
					</MudGrid>
					<MudGrid>
						<MudItem xs="12" lg="12">
							<MudCardActions>
								<div hidden="@_isInserting">
									<MudButton Variant="Variant.Filled" Color="Color.Primary" @onclick="@HandleSubmit">
										<MudText>
											Create
										</MudText>
									</MudButton>
								</div>
								<div hidden="@_isUpdating">
									<MudButton Variant="Variant.Filled" Color="Color.Warning" @onclick="@HandleUpdate">
										<MudText>
											Save changes
										</MudText>
									</MudButton>
								</div>
								<MudButton Variant="Variant.Filled" Color="Color.Dark" @onclick="@HandleCancel" Style="margin-left: 10px;">
									<MudText>
										Cancel
									</MudText>
								</MudButton>
							</MudCardActions>
						</MudItem>

					</MudGrid>
				</EditForm>
			</MudItem>
		</MudGrid>

		<MudTable Items="@_words" hidden="@_panelOpenState" Breakpoint="Breakpoint.Md">
			<HeaderContent>
				<MudTh>
					<strong>Value</strong>
				</MudTh>
				<MudTh>
					<strong>Category</strong>
				</MudTh>
				<MudTh>
					<strong>CreateDate</strong>
				</MudTh>
				<MudTh></MudTh>
			</HeaderContent>
			<RowTemplate>
				<MudTd DataLabel="Value">@context.Value</MudTd>
					
					<MudTd DataLabel="Category">@context.Category</MudTd>
					<MudTd DataLabel="Create date">@context.CreateDate.ToString("D")</MudTd>
					
					<MudTd DataLabel="Action">
						<MudIconButton @onclick="() => OnDeleteClick(context.Slug)" Icon="@Icons.Material.Filled.Delete" Variant="Variant.Text" Color="Color.Error" Size="Size.Medium" />
						<MudIconButton @onclick="() => OnEditClick(context.Slug)" Icon="@Icons.Material.Filled.Edit" Variant="Variant.Text" Color="Color.Primary" Size="Size.Medium" />
					</MudTd>
				</RowTemplate>
			</MudTable>
	}
}

@code {

    private string _createOrEditHeader = "New Word";
    private bool _serverError;
    private List<CategoryResponse> _category;
    private List<WordListDto> _words;
    private bool _isDialogOpen;
    private string _itemSlugToDelete;
    private bool _panelOpenState;
    private bool _isInserting;
    private bool _isUpdating = true;
    private string _updateSlug;
    private string _selectedCategory = string.Empty;

    private TimeSpan? _CreateDateDateTime;

    async Task OnDeleteClick(string slug)
    {
        _itemSlugToDelete = slug;
        _isDialogOpen = true;

        var words = _words.FirstOrDefault(c => c.Slug == slug);
        var parameters = new DialogParameters<DialogMudBlazor>();
        parameters.Add(x => x.ContentText, "Do you really want to delete this Word?");
        parameters.Add(x => x.ButtonText, "Delete");
        parameters.Add(x => x.Color, Color.Error);

        var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall };

        var dialog = DialogService.Show<DialogMudBlazor>("Delete", parameters, options);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            try
            {
                await VService.OnDelete(slug);
                Snackbar.Add($"Deleted", Severity.Success);
                _words.Remove(words);
                Clear();
            }
            catch (Exception)
            {
                Snackbar.Add("Server is not responding, try latter", Severity.Error);
            }
            StateHasChanged();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            _category = await VService.GetAllCategory();
            _words = await VService.GetAllWord();
        }
        catch (Exception)
        {
            _serverError = true;
            StateHasChanged();
        }
    }

    private async Task HandleSubmit()
    {
        if (_CreateDateDateTime.HasValue)
            VService.creatingNewWord.CreateDate += _CreateDateDateTime.Value;

        try
        {
            var catId = _category.First(c => c.Name == _selectedCategory).Id;
            VService.creatingNewWord.CategoryId = catId;
            var result = await VService.OnSaveCreateClick(); 
            if (result.IsSuccessStatusCode)
            {
                Snackbar.Add($"{VService.creatingNewWord.Value} created", Severity.Success);
            }
            else
            {
                Snackbar.Add((await result.Content.ReadFromJsonAsync<CustomProblemDetails>()).Detail, Severity.Error);
            }
            await LoadData();
            Clear();
        }
        catch (Exception)
        {
            Snackbar.Add("Server is not responding, try latter", Severity.Error);
        }
    }

    private async Task LoadData()
    {
        _words = await VService.GetWords();
    }


    public async Task OnEditClick(string slug)
    {
        // Получение данных о выбранной вакансии
        var words = await VService.GetBySlug(slug);
        _createOrEditHeader = $"Edit {words.Value}";
        if (words != null)
        {
            // Отображение данных о выбранной вакансии в форме
            VService.creatingNewWord.Value = words.Value;
            VService.creatingNewWord.Description = words.Description;
            if (words.CategoryId.HasValue)
            {
                VService.creatingNewWord.CategoryId = words.CategoryId.Value;
            }
			VService.creatingNewWord.CreateDate = DateTime.Now;
            _selectedCategory = _category.First(c => c.Id == words.CategoryId).Name;
            // Открытие панели формы
            _panelOpenState = true;
            _isInserting = true;
            _isUpdating = false;
            _updateSlug = slug;
        }
    }

    private async Task HandleUpdate()
    {

		VService.creatingNewWord.UpdatedDate = DateTime.Now;
        var catId = _category.First(c => c.Name == _selectedCategory).Id;
		VService.creatingNewWord.CategoryId = catId;
		await VService.UpdateWords(_updateSlug);
		await LoadData();
		Clear();
	}


	private async Task OnKeyDown(KeyboardEventArgs e)
	{
		if (e.Code == "Enter")
		{
			await Task.Delay(1);
		}
	}

	void HandleCancel()
	{
		Clear();
	}

	private void Clear()
	{
		_createOrEditHeader = "New Word";
		VService.creatingNewWord.Value = string.Empty;
		VService.creatingNewWord.Description = string.Empty;
		VService.creatingNewWord.CreateDate = DateTime.Now;
		VService.creatingNewWord.UpdatedDate = DateTime.Now;
		_isInserting = false;
		_isUpdating = true;
		_updateSlug = string.Empty;
		_panelOpenState = false;
	}

}