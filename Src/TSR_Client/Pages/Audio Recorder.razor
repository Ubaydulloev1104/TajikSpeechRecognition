@page "/Audio_Recorder"
@inject IJSRuntime mJS

<PageTitle>Audio Recorder</PageTitle>

<h1>Audio Recorder</h1>
<hr />
<button @onclick="butRecordAudioStart_Click" class="btn btn-primary" disabled=@mDisableRecordAudioStart>Start Record</button>
<button @onclick="butRecordAudioPause_Click" class="btn btn-primary" disabled=@mDisableRecordAudioPause>Pause</button>
<button @onclick="butRecordAudioResume_Click" class="btn btn-primary" disabled=@mDisableRecordAudioResume>Resume</button>
<button @onclick="butRecordAudioStop_Click" class="btn btn-primary" disabled=@mDisableRecordAudioStop>Stop</button>
<button @onclick="butDownloadBlob_Click" class="btn btn-primary" disabled=@mDisableDownloadBlob>Download Audio</button>
<button @onclick="butSaveBlob_Click" class="btn btn-primary" disabled=@mDisableSaveBlob>Save Audio</button>
<hr />
<audio controls autoplay src=@mUrl></audio>
<hr />

<div class="alert alert-secondary mt-4">
    <span class="oi oi-pencil me-2" aria-hidden="true"></span>
    <strong></strong>
</div>
<script>
    var BlazorAudioRecorder = {};
    var mCaller;
        var mStream;
        var mAudioChunks;
        var mMediaRecorder;
        var mUrl = ""

        BlazorAudioRecorder.Initialize = function (vCaller) {
            mCaller = vCaller;
        };
        BlazorAudioRecorder.SaveAudioOnServer = async function () {
            const formData = new FormData();
            formData.append('audio', new Blob(mAudioChunks, { type: 'audio/wav' }), 'recording.wav');

            await fetch('https://localhost:7160/api/audiorecorder/saveaudio', {
                method: 'POST',
                body: formData
            });
        };

        BlazorAudioRecorder.StartRecord = async function () {
            mStream = await navigator.mediaDevices.getUserMedia({ audio: true });
            mMediaRecorder = new MediaRecorder(mStream);
            mMediaRecorder.addEventListener('dataavailable', vEvent => {
                mAudioChunks.push(vEvent.data);
            });

            mMediaRecorder.addEventListener('error', vError => {
                console.warn('media recorder error: ' + vError);
            });

            mMediaRecorder.addEventListener('stop', () => {
                var pAudioBlob = new Blob(mAudioChunks, { type: "audio/wav;" });
                var pAudioUrl = URL.createObjectURL(pAudioBlob);
                // mCaller.invokeMethodAsync('OnAudioUrl', pAudioUrl);
                window.DotNet.invokeMethodAsync('Blazor', 'OnAudioUrl', pAudioUrl);
                .then(() => console.log('OnAudioUrl method invoked successfully'))
                .catch((error) => console.error('Error invoking OnAudioUrl method:', error));

                // uncomment the following if you want to play the recorded audio (without the using the audio HTML element)
                //var pAudio = new Audio(pAudioUrl);
                //pAudio.play();
            });

            mAudioChunks = [];
            mMediaRecorder.start();
        };

        BlazorAudioRecorder.PauseRecord = function () {
            mMediaRecorder.pause();
        };

        BlazorAudioRecorder.ResumeRecord = function () {
            mMediaRecorder.resume();
        };

        BlazorAudioRecorder.StopRecord = function () {
            mMediaRecorder.stop();
            mStream.getTracks().forEach(pTrack => pTrack.stop());
        };

        BlazorAudioRecorder.DownloadBlob = function (vUrl, vName) {
            // Create a link element
            const link = document.createElement("a");

            // Set the link's href to point to the Blob URL
            link.href = vUrl;
            link.download = vName;

            // Append link to the body
            document.body.appendChild(link);

            // Dispatch click event on the link
            // This is necessary as link.click() does not work on the latest firefox
            link.dispatchEvent(
                new 1('click', {
                    bubbles: true,
                    cancelable: true,
                    view: window
                })
            );

            // Remove the link from the body
            document.body.removeChild(link);
        };
    
</script>

@code {
    string mUrl;
    public const string FormatDateTimeStamp = "yyyy_MM_dd__HH_mm_ss_ffff";
    bool mDisableRecordAudioStart;
    bool mDisableRecordAudioPause = true;
    bool mDisableRecordAudioResume = true;
    bool mDisableRecordAudioStop = true;
    bool mDisableDownloadBlob = true;
    bool mDisableSaveBlob = true;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await mJS.InvokeVoidAsync("BlazorAudioRecorder.Initialize", DotNetObjectReference.Create(this));
    }

    void butRecordAudioStart_Click()
    {
        mUrl = "";
        mDisableRecordAudioStart = true;
        mDisableRecordAudioPause = false;
        mDisableRecordAudioResume = true;
        mDisableRecordAudioStop = false;
        mDisableDownloadBlob = true;
        mDisableSaveBlob = true;
        mJS.InvokeVoidAsync("BlazorAudioRecorder.StartRecord");
        StateHasChanged();
    }

    void butRecordAudioPause_Click()
    {
        mDisableRecordAudioStart = true;
        mDisableRecordAudioPause = true;
        mDisableRecordAudioResume = false;
        mDisableRecordAudioStop = false;
        mDisableDownloadBlob = true;
        mDisableSaveBlob = true;
        mJS.InvokeVoidAsync("BlazorAudioRecorder.PauseRecord");
    }

    void butRecordAudioResume_Click()
    {
        mDisableRecordAudioStart = true;
        mDisableRecordAudioPause = false;
        mDisableRecordAudioResume = true;
        mDisableRecordAudioStop = false;
        mDisableDownloadBlob = true;
        mDisableSaveBlob = true;
        mJS.InvokeVoidAsync("BlazorAudioRecorder.ResumeRecord");
    }

    void butRecordAudioStop_Click()
    {
        mDisableRecordAudioStart = false;
        mDisableRecordAudioPause = true;
        mDisableRecordAudioResume = true;
        mDisableRecordAudioStop = true;
        mDisableDownloadBlob = false;
        mDisableSaveBlob = false;
        mJS.InvokeVoidAsync("BlazorAudioRecorder.StopRecord");
        StateHasChanged(); 
    
    }

    void butDownloadBlob_Click()
    {
        if (!string.IsNullOrEmpty(mUrl))
        {
            Console.WriteLine("dd" + mUrl);
            mJS.InvokeVoidAsync("BlazorAudioRecorder.DownloadBlob", mUrl, "MyRecording_" + DateTimeStamp() + ".wav");
        }
    }

    void butSaveBlob_Click()
    {
        mJS.InvokeVoidAsync("BlazorAudioRecorder.SaveAudioOnServer");
    }

    [JSInvokable]
    public async Task OnAudioUrl(string vUrl)
    {
        mUrl = vUrl;
        await InvokeAsync(() => StateHasChanged());
        await mJS.InvokeVoidAsync("BlazorAudioRecorder.SaveAudioOnServer", mUrl);
    }

    public static string DateTimeStamp()
    {
        var pOut = DateTime.Now.ToString(FormatDateTimeStamp);
        return pOut;
    }
}