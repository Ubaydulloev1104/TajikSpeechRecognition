@page "/words"
@using Application.Contracts.Word.Responses
@using TSR_Client.Components.Client
@inject IWordService WordService
@implements IDisposable
<!-- Words page -->
<div class="container">
    <!-- Search -->
    <div class="w-100">
        <div class="p-1 d-flex bg-white shadow rounded mb-5">
            <div class="input-group">
                <input type="text"
                       class="form-control border-0"
                       placeholder="Search"
                       aria-label="Search"
                       @bind-value="@Value"
                       aria-describedby="">
                <div class="input-group-append">
                    <button
                        class="btn btn-outline-primary"
                        @onclick="() => BtnSearch(Value)"
                        type="button">
                        Search
                    </button>
                </div>
            </div>
        </div>
    </div>
    <!-- End Search -->
    <div class="w-100 d-flex flex-row justify-content-between">
        <div class="category bg-white shadow-lg rounded p-4">
            <Category></Category>
        </div>
        <div class="vacancy">
            @if (_Words is null)
            {
                <div></div>
            }
            else
            {
                <div>
                    @foreach (var vacancy in WordService.Words)
                    {
                        <a href="">
                            <div class="card-vacancy w-100 bg-white shadow-lg rounded mb-4">
                                <div class="d-flex flex-column p-3">
                                    <h2 class="mb-2 text-black">@vacancy.Value</h2>
                                </div>
                            </div>
                        </a>
                    }
                </div>
            }
        </div>
    </div>
</div>
<!-- End Vacancy page -->

@code {

    private List<WordListDto> _Words;
    public string Value;

    protected override async Task OnInitializedAsync()
    {
        _Words = await WordService.GetAllWords();
    }


    void BtnSearch(string Value)
    {
        WordService.GetWordByValue(Value);
        WordService.OnChange += StateHasChanged;
    }

    public void Dispose()
    {
        WordService.OnChange -= StateHasChanged;
    }

}
